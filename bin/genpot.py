#!/usr/bin/env -S python
# SPDX-License-Identifier: MIT
# Copyright 2024 hirmiura (https://github.com/hirmiura)
"""jsonファイルからpotファイルを生成する"""

from __future__ import annotations

import argparse
import json
import re
import sys
from datetime import datetime, timedelta, timezone
from logging import INFO, StreamHandler, getLogger
from pathlib import Path

from bhtransconf import BhTransConf
from extract import CoreObjT
from jsonpointer import JsonPointer
from polib import POEntry, POFile
from walk import walk

logger = getLogger(__name__)
handler = StreamHandler(sys.stderr)
handler.setLevel(INFO)
logger.setLevel(INFO)
logger.addHandler(handler)
logger.propagate = False

DEFAULT_CONFIG_FILE = "bhtrans.toml"
TZ = timezone(timedelta(hours=+9), "JST")

CC_RESET = "\033[0m"
CC_RED = "\033[91m"
CC_GREEN = "\033[92m"
CC_YELLOW = "\033[93m"

config: BhTransConf
pot: POFile = POFile()


def pargs() -> argparse.Namespace:
    """コマンドライン引数を処理する

    Returns:
        argparse.Namespace: 処理した引数
    """
    parser = argparse.ArgumentParser(description="jsonファイルからpotファイルを生成する")
    parser.add_argument(
        "-c",
        "--conf",
        default=DEFAULT_CONFIG_FILE,
        help="設定ファイル。デフォルト:%(default)s",
    )
    parser.add_argument("--version", action="version", version="%(prog)s 0.1.0")
    args = parser.parse_args()

    # 設定ファイルを読み込む
    global config
    conf_file = args.conf or DEFAULT_CONFIG_FILE
    config = BhTransConf.load(Path(conf_file))
    logger.info("設定ファイル(%s)を読み込みました", conf_file)

    return args


def process() -> int:
    """処理の大元となる関数

    Returns:
        int: 成功時は0を返す
    """
    set_pot_header()
    # core.jsonを読み込む
    core_obj: CoreObjT = json.loads(Path(config.input_json).read_text())
    logger.info("JSONファイル(%s)を読み込みました", config.input_json)

    # グループ(タイプ)毎に処理する
    for grp, rule in config.rules.items():
        logger.info("グループ(%s)を処理しています", grp)
        if grp not in core_obj:
            logger.warning("%s%sが無いためスキップします%s", CC_YELLOW, grp, CC_RESET)
            continue  # grpが無ければスキップ
        cre_extracts = [re.compile(ptn) for ptn in rule.extracts]  # 正規表現をコンパイル
        obj = core_obj[grp]

        # オブジェクトを走査する
        for wp in walk(obj):
            # JSON Pointerがマッチするか
            is_match = any(cre.search(wp.pointer.path) for cre in cre_extracts)
            if not is_match:
                continue  # マッチしなければスキップ
            text = str(wp.objects[-1])
            if len(str.strip(text)) == 0:
                continue  # 空および空白のみの場合もスキップ

            # POTファイルのエントリーを作成する
            path = (JsonPointer((grp,)) / wp.pointer).path
            logger.debug("マッチしました %s: %s", path, text)
            if rule.msgctxt:  # コンテキストが必要か？
                entry = POEntry(msgid=text, msgctxt=path)
            else:
                entry = POEntry(msgid=text)
            pot.append(entry)

    # POTファイルを保存する
    pot.save(config.output_pot)
    logger.info("%s に出力しました", config.output_pot)
    return 0


def set_pot_header() -> None:
    """POTファイルのヘッダを設定する"""
    global pot
    pot.header = "Generated by genpot.py"
    dt_now = datetime.now(TZ)
    pot.metadata = {
        "Project-Id-Version": config.pid_version,
        "POT-Creation-Date": dt_now.strftime("%Y-%m-%d %H:%M%z"),
        "MIME-Version": "1.0",
        "Content-Type": "text/plain; charset=utf-8",
        "Content-Transfer-Encoding": "8bit",
    }


def main() -> int:
    """メイン関数

    Returns:
        int: 成功時は0を返す
    """
    pargs()
    result = process()
    return result


if __name__ == "__main__":
    sys.exit(main())
